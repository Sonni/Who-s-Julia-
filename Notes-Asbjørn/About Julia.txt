Julia allows the use of meta-programming. Meta-programming is a way to write programs in programs and let them use program code as data. In Julia you can do this by defining macros. For example, the @time macro was used extensively in the project. The @time is in the standard Julia library. The @time takes a function as an argument and sets a timer in the top of the code from the argument and stops the timer in the bottom and prints the time passed and memory allocated. Meta-programming and macros are known from Lisp, a programming language, and have been used in early AI research. 

Julia is a new language which will mean there are not many libraries written in Julia. Julia has an import feature for both Python and C libraries to avoid this disadvantage. To use Python in Julia you would have to import the library PyCall with the "using" operation. Now you can use a macro to import Python libraries @pyimport. To use C libraries or coding you can simply run the function ccall(). The programming language C is a well known and used language. Many systems are based on C, which makes C an advantage for hardware programming. Another feature is to execute shell commands. You can execute shell commands using run(``). An example would be running run(`echo Hello World`) which would return the output "Hello World".


